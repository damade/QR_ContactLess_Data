// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id      Int      @id @default(autoincrement())
  phoneNumber   String   @unique
  email   String @unique
  firstName    String  @db.VarChar(45)
  lastName    String  @db.VarChar(45) 
  fullName    String  @db.VarChar(100)
  dateOfBirth DateTime? 
  gender Gender  
  maritalStatus MaritalStatus?
  identificationType  IdentificationType?
  identityUrl String?
  signatureUrl String?
  bvn    String
  bvnIndex String
  nin    String?
  ninIndex String?
  pin    String 
  userImage String?
  referralCode  String
  currentLoanBalance Int @default(0)
  walletBalance Int @default(0)
  createdAt  DateTime   @default(now())
  updatedAt DateTime  @updatedAt
  isProfileComplete Boolean @default(false)
  role    Role     @default(TEST_USER)
  bearerToken String? 
  employmentInfo  EmploymentProfile?
  businessInfo  BusinessProfile?
  addressInfo   AddressInfo?
  guarantor Guarantor?
  referrerInfo ReferrerInfo? 
  bankDetails  BankDetails?
  cardDetails CardDetails[]
  addCardDetails AddCardDetails[]
  loanEligibility LoanEligibility?
  //loanSummary LoanSummary?
  loanInfo LoanInfo[]
  issues Issues[]
}


model AdminUser {
  id      Int      @id @default(autoincrement())
  phoneNumber   String
  email   String @unique
  firstName    String  @db.VarChar(45)
  lastName    String  @db.VarChar(45)
  fullName    String  @db.VarChar(100)
  gender Gender  
  password    String 
  role    Role     @default(TEST_USER)
  department Department?
  bearerToken String? 
  loanInfo LoanInfo[]
}


model Department{
  id  Int  @id @default(autoincrement())
  name String
  description String
  status AdminEditStatus @default(Suspended)
  adminUser  AdminUser   @relation(fields: [adminUserId], references: [id])
  adminUserId Int
}

model LoanInfo{
  id      Int      @id @default(autoincrement())
  uniqueId String @db.VarChar(12) @unique
  loanAmount  Int
  loanType LoanTypes
  interestAmount Int
  loanTenure  String
  loanTenureInMonths Int
  reasonForLoan String?
  totalLoanAmount Int
  loanAmountDue  Int
  loanInterest Int
  loanStatus LoanRequestStatus
  comment String?
  appliedAt  DateTime   @default(now())
  editedAt DateTime  @updatedAt
  approvedAt  DateTime?
  loanDueDate DateTime?
  loanTransferRepayment   LoanTransferRepayment[]
  user  User   @relation(fields: [userId], references: [id])
  userId Int
  adminUser  AdminUser?   @relation(fields: [approvedBy], references: [id])
  approvedBy Int?
  cardDetails  CardDetails?   @relation(fields: [cardId], references: [id])
  cardId Int?
  bankDetails  BankDetails?   @relation(fields: [bankDetailsId], references: [id])
  bankDetailsId Int?
}

model LoanTransferRepayment{
  id     Int    @id @default(autoincrement())
  referenceNumber String
  repaymentAmount Int
  receiptUrl String
  comment String?
  transactionDate   DateTime
  sentAt  DateTime   @default(now())
  approvedOrDeclinedAt  DateTime?
  loanInfo  LoanInfo  @relation(fields: [loanId], references: [uniqueId])
  loanId String
  adminUser  AdminUser?   @relation(fields: [approvedBy], references: [id])
  approvedBy Int?
}

model LoanEligibility{
  id     Int    @id @default(autoincrement())
  isEligible    Boolean  @default(false)
  hasPendingLoan Boolean  @default(false)
  issues  LoanEligibilityIssue[]
  reasonForIssues String?
  currentTier LoanTier  @default(None)
  creditScore Int?
  creditScoreRate CreditScoreRate?
  creditScoreUpdatedAt DateTime  @default(now())
  internalCreditScore Float @default(0.0)
  user  User   @relation(fields: [userId], references: [id])
  userId Int
}

model Issues{
  id     Int    @id @default(autoincrement())
  subject String
  message String
  issueCategory IssueCategory
  issueResolutionStatus IssueResolutionStatus @default(Resolving)
  remark  String?
  user  User   @relation(fields: [userId], references: [id])
  userId Int
}

model BankDetails{
  id     Int    @id @default(autoincrement())
  nuban  String
  bankName  String
  nubanCode  String
  accountName String
  loanInfo LoanInfo[]
  user  User   @relation(fields: [userId], references: [id])
  userId Int
}

model CardDetails{
  id     Int    @id @default(autoincrement())
  last4  String
  brand  String
  cardBank  String?
  accountName String?
  isDefault Boolean @default(false)
  reusable Boolean  @default(false)
  authorizationCode String
  loanInfo LoanInfo[]
  user  User   @relation(fields: [userId], references: [id])
  userId Int 
}

model AddCardDetails{
  id     Int    @id @default(autoincrement())
  last4  String
  brand  String
  amount  Int
  isSuccessful Boolean @default(false)
  dateEntered DateTime  @default(now())
  user  User   @relation(fields: [userId], references: [id])
  userId Int
}

model ReferrerInfo{
  id     Int    @id @default(autoincrement())
  surveyType  ReferralSurvey?
  surveyTypeOther String?
  referrer  String?
  isVestable Boolean @default(false)
  hasBeenPaid Boolean @default(false)
  updatedAt DateTime  @updatedAt @default(now())
  user  User   @relation(fields: [userId], references: [id])
  userId Int
}

model AddressInfo{
  id     Int    @id @default(autoincrement())
  address    String
  landMark  String?
  state String
  createdAt  DateTime   @default(now())
  updatedAt DateTime  @updatedAt
  user  User   @relation(fields: [userId], references: [id])
  userId Int
}

model EmploymentProfile {
  id     Int    @id @default(autoincrement())
  employmentStatus  EmploymentStatus
  employersName    String?
  companyAddress  String?
  payDay  DateTime?
  isComplete Boolean    @default(false)
  monthlyIncome Int?
  unEmploymentDuration  Int?
  createdAt  DateTime   @default(now())
  updatedAt DateTime  @updatedAt
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

model Guarantor{
  id     Int    @id @default(autoincrement())
  name    String
  phoneNumber  String
  approvalStatus  SetupStatus
  createdAt  DateTime   @default(now())
  updatedAt DateTime  @updatedAt
  user  User   @relation(fields: [userId], references: [id])
  userId Int
}

model BusinessProfile {
  id     Int    @id @default(autoincrement())
  businessName  String
  businessSector  BusinessSector
  businessAddress String
  monthlyTurnover Int
  businessPhoneNumber String
  isComplete Boolean    @default(false)
  remark  String?
  isBusinessRegistered  Boolean
  rcNumber  String?
  isRcNumberVerified  Boolean @default(false)
  cacUrl  String?
  createdAt  DateTime   @default(now())
  updatedAt DateTime  @updatedAt
  user   User   @relation(fields: [userId], references: [id])
  userId Int
}

enum Role {
  LIVE_USER
  TEST_USER
  SYS_ADMIN
  FINANCE_ADMIN
  IT_ADMIN
  CC_ADMIN
  BT_ADMIN
}

enum SetupStatus{
  Pending
  Approved
  Rejected
}

enum LoanTypes{
  Personal
  Business
}

enum AdminEditStatus{
  Active
  Inactive
  Suspended
}

enum LoanRequestStatus{
  Paid
  Declined
  Overdue
  Pending
  InProgress
  Temp
}

enum RequestStatus{
  Accepted
  Declined
  Pending
  InProgress
}

enum Gender {
  Male
  Female 
}

enum MaritalStatus{
  Single
  Married
  Divorce  
}

enum EmploymentStatus{
  Selfemployed
  Employed
  Unemployed
}

enum IdentificationType{
  NIN
  DRIVERSLICENSE
  INTERNATIONALPASSPORT
  VOTERSCARD
}

enum ReferralSurvey{
  Family
  Friend
  Twitter
  WhatsApp
  Instagram
  Facebook
  Others
  None
  Google
  Linkedln
}

enum LoanTier{
  Tier0
  Tier1
  Tier2
  Tier3
  Tier4
  Tier5
  None
  Custom
}

enum LoanEligibilityIssue{
  Profile
  EmploymentProfile
  BusinessProfile
  NoBankDetails
  NoDebitBankDetails
  WrongBusinessNameDetails
  WrongRcNumber
  GuarantorProfile
  OldDebt
  NoCreditScore
  LowCreditScore
  Custom
  None
}

enum CreditScoreRate{
  Excellent
  Better
  Good
  Fair
  Poor
  Bad
}

enum IssueCategory{
  LoanApplication
  LoanRepayment
  LoanDisbursement
  Enquiries
}

enum IssueResolutionStatus{
  Resolved
  Resolving
  NotResolved
}

enum BusinessSector{
  Agriculture
  Aviation 
Commercial_Retail 
Construction 
Education_Training 
Energy_PowerGeneration 
FMCG 
Fashion
FinancialServices
Ict
Haulage_Logistics 
Healthcare
Mining
Media_Entertainment
Oil_Gas 
ProfessionalServices
Telecommunication 
Tourism_Hospitality 
Transportation 
WasteManagement
Others
}